
plugins {
  id "application" // implies java
}

ext {
	javaTarget   = 1.8
	fregeRelease = '3.25alpha'
	fregeVersion = '3.25.84'
	fregeDir     = "${rootProject.projectDir}/lib/org/frege-lang/frege/${fregeVersion}"
	fregeJar     = "${fregeDir}/frege-${fregeVersion}.jar"
}

sourceCompatibility = 1.8
targetCompatibility = javaTarget

// fetch frege distro from github releases and store locally
ant.mkdir(dir: fregeDir)
ant.get(src: "https://github.com/Frege/frege/releases/download/${fregeRelease}/frege${fregeVersion}.jar",
		dest: fregeJar,
		skipexisting: 'true')

// prepare all the directories that the frege tasks rely upon
ant.mkdir(dir: sourceSets.main.java.outputDir)
ant.mkdir(dir: sourceSets.test.java.outputDir)
ant.mkdir(dir: "${project.buildDir}/resources/main") // needed to compile the tests (?)

repositories {
	flatDir {
         dirs fregeDir
    }
    mavenLocal()
    jcenter()
	maven { // for the snapshots -- only if you need FregeFX
		url = "https://oss.sonatype.org/content/groups/public"
	}
}

// we manage dependencies as if it was a Java project
dependencies {
    // CHANGE NEXT LINE BELOW IF YOU WANT TO USE A DIFFERENT COMPILER
	implementation "org.frege-lang:frege:${fregeVersion}"

    //implementation 'org.frege-lang:frege-native-gen:1.3' 	// only if you need native-gen
    implementation 'org.frege-lang:fregefx:0.8', { 			// only if you need FregeFX (and a Java 8 with JavaFX 8)
		exclude module: 'frege'								// fregefx comes with a frege dependency but we
	}														//   we prefer to use our own version
}

//fregeDoc {
//	verbose = true
//	module  = "$buildDir/classes/main" // should become default
//}

//fregeQuickCheck {
//    help = true          // default: false
//    listAvailable = true // default: false // true will not run the tests
//    verbose = false      // default: true  // false is _very_ silent
//    num = 500            // default: 100
//    includePredicates = ['myFirstPred', 'mySecondPred']
//    excludePredicates = ['myFirstPred', 'mySecondPred']
//    moduleName = 'DummyTest'         // prio 1
//    moduleJar  = 'path/to/my/module.jar'  // prio 2
//    moduleDir  = "$project.buildDir/classes/test" // prio 3, default
//    classpathDirectories = ["$project.buildDir/classes/main", "$project.buildDir/classes/test"]
//    allJvmArgs = ['-Xss4M']
//}



task fregeCompile(type: JavaExec) {      	// https://docs.gradle.org/6.5/dsl/org.gradle.api.tasks.JavaExec.html
    group       = "frege"
    description = "Compile the -Pfrege_file=."
    classpath   = files fregeJar
	args([
//		"-help",
//		"-version",
//		"-Dfrege.javac=javac -J-Xmx512m", 	//   java compiler and options, default internal
		"-d", 								//  target directory for *.java and *.class files
			sourceSets.main.java.outputDir,
		"-fp", 								//  frege path: where to find imported frege packages
			sourceSets.main.compileClasspath.asPath,
		"-enc", "UTF-8", 					//  charset for source code files, standard is UTF-8
//		"-enc DEFAULT", 					//  platform default charset for source code files
		"-target", javaTarget,	 			//  generate code for java version n.m, also passed to javac
//		"-nocp", 							//  exclude java classpath from -fp
		"-hints", 							//  print more detailed error messages and warnings
//		"-inline", 							//  inline functions where possible
//		"-strict-pats", 					//  check patterns in multi-argument functions strictly from left to right
		"-comments", 						//  generate commented code
//		"-explain", "i[-j]" 				//  print some debugging output from type checker
						  					//  regarding line(s) i (to j). May help to understand
		                  					//  inexplicable type errors better.
//		"-nowarn", 							//  don't print warnings (not recommended)
//		"-v", 								//  verbose mode on
		"-make", 							//  build outdated or missing imports
		"-sp",		 						//  look for source files in srcpath, default is .
			"${projectDir}/src/main/frege",
//		"-j", 								//  do not run the java compiler
		"-ascii", 							//  do not use ‚Üí, ‚áí, ‚àÄ and ‚à∑ when presenting types,
		                  					//  and use ascii characters for java generics variables
//		"-greek", 							//  make greek type variables
//		"-fraktur", 						//  make ùñãùñóùñÜùñêùñôùñöùñó type variables
		"-latin", 							//  make latin type variables
        project.hasProperty("frege_file") ? project.frege_file : "${projectDir}/src/main/frege" //  set the file-to-compile via a -P option, if not given use "."
	])
	// println commandLine // for debugging the build
}

// you might want to start the repl as
//   gradlew --console=plain --no-daemon fregeRepl
// to see less confusing "build progress" output and have proper arrow key support

task fregeRepl(type: JavaExec) {
	// dependsOn     fregeCompile  // in case we always want to compile before
    group         = "frege"
    description   = "Start the Frege REPL on the project classpath"
	standardInput = System.in 								// this should run interactively, so we need stdin
    classpath     = files sourceSets.main.java.outputDir, fregeJar
    main          = "frege.repl.FregeRepl"
}

task fregeRun(type: JavaExec) {
	dependsOn     fregeCompile  // in case we always want to compile before running
    group         = "frege"
    description   = "Run -Pclass_name=Main"
	standardInput = System.in 								// this might run interactively, so we need stdin
    classpath     = files sourceSets.main.runtimeClasspath.asPath
    main          = project.hasProperty("class_name") ? project.class_name : "Main"
}

task fregeTestCompile(type: JavaExec) {
	dependsOn   fregeCompile
    group       = "frege"
    description = "Compile all Frege test files"
    classpath   = files fregeJar
	args([
		"-d", 								//  target directory for *.java and *.class files
			sourceSets.test.java.outputDir,
		"-fp", 								//  frege path: where to find imported frege packages
			sourceSets.test.compileClasspath.asPath,
		"-target", javaTarget,	 			//  generate code for java version n.m, also passed to javac
		"-hints", 							//  print more detailed error messages and warnings
		"-comments", 						//  generate commented code
		"-make", 							//  build outdated or missing imports
		"-sp",		 						//  look for source files in srcpath, default is .
			"${projectDir}/src/test/frege",
		"-ascii", 							//  do not use ‚Üí, ‚áí, ‚àÄ and ‚à∑ when presenting types,
		"-latin", 							//  make latin type variables
		"${projectDir}/src/test/frege" 		//  compile all tests
	])
}

task fregeTest(type: JavaExec) {
	dependsOn     fregeTestCompile  // in case we always want to compile before running
    group         = "frege"
    description   = "Test -Pclass_name=MainTest or all in test dir"
    classpath     = files sourceSets.test.runtimeClasspath.asPath
    main          = "frege.tools.Quick"
	args([
		"-v", 								//  verbose checks
//		"-vv", 								//  most detailed output, use for a single check
//		"-n", 								//  each check will be running num times, default 100
//			"100",
//		"-p", 								//  only check the named predicates
//			"pred1,pred2",
//		"-x", 								//  do not check the predicates listed
//			"pred1,pred2",
//		"-l", 	 							//  list predicates available, do not check them
											//  module (i.e. class) name or all tests in dir
		project.hasProperty("class_name") ? project.class_name : sourceSets.test.java.outputDir
	])
}

