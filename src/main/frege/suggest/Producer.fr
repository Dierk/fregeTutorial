module suggest.Producer where

type Consumer s accu product = accu → product → ST s accu

data Producer productionType s accu product = Producer {
    onLine  :: Mutable s productionType → accu → Consumer s accu product → ST s accu,
    offLine :: Mutable s productionType → ST s ()
}

--class LineProducer lp where
--    onLine  :: Mutable s lp → a → LineConsumer s a → ST s a
--    offLine :: Mutable s lp → ST s ()

data ProductionData p = ProductionData {
    proceed     :: Bool,                -- if false we stop generating lines
    product        :: p,              -- the currently generated product, "onLine" will be called with this
    nextProduct    :: p -> p     -- the generation function for the next product
}
type Production p = Ref (ProductionData p)   -- a mutable reference to the generator data
type DataProducer s a p = Producer (Production p) s a p

dataProducer :: DataProducer s a p
dataProducer = Producer {
    onLine = \production accu consume -> do
        state <- production.get
        if state.proceed
        then do
            newValue <- consume accu state.product        -- call handler with the last generated product (might call offLine)
            production.modify _.{product <- state.nextProduct}    -- generate the next product
            dataProducer.onLine production newValue consume              -- continue processing with updated values
        else
            return accu,
    offLine = \production -> production.modify _.{proceed = false}  -- called by handler to stop generating lines
}

main = do
    println "----------------------------------------"
    println "reading from a StringProducer"
    stringProduction <- Ref.new $ ProductionData { proceed = true, product = "", nextProduct = (++ "x") }
    result <- dataProducer.onLine stringProduction 0 $ \num line ->
        if (num > 3)
        then do
            dataProducer.offLine stringProduction
            return num
        else do
            println $ show num ++ ": " ++ line
            return  $ num + 1
    println $ "StringProducer works as expected: " ++ show (result == 4)

    println "----------------------------------------"
    println "reading from an IntProducer"
    intProduction <- Ref.new $ ProductionData { proceed = true, product = 0, nextProduct = (+1) }
    result <- dataProducer.onLine intProduction 0 $ \_ product ->
        if (product > 3)
        then do
            dataProducer.offLine intProduction
            return product
        else do
            println $ show product
            return  product
    println $ "IntProducer works as expected: " ++ show (result == 4)
